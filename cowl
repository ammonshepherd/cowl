#!/usr/bin/env ruby


require "optparse"
require "ostruct"
require "pp"
require "FileUtils"
require "RMagick"

class Parser 
  def self.parse(args)
    options = OpenStruct.new
    options.input_dir = FileUtils.pwd
    options.language = "deu"
    options.mark = "Copyright Â©2014 Me" # TODO: get date from image file
    options.output_dir = FileUtils.pwd + "/output"


    opt_parser = OptionParser.new do | opts | 
      opts.banner = "Usage: cowl [options]"
      opts.separator "
      cowl is a program that will take a directory of images
      and do the following actions on each image: 
        1) create a copy of the image with a watermark, 
        2) OCR the image and create a txt file containing the text, 
        3) compile the images into a single PDF document." 
      opts.separator ""
      opts.separator "Options:"

      opts.on_tail("-h", "--help", "Show this help message.") do
        puts opts
        exit
      end
      opts.separator ""

      opts.on("-c", "--cleanup", "Delete images and folders created by running this script.") do 
        puts "Deleting output directory and all files within."
        FileUtils.rm_rf(options.output_dir)
        exit
      end
      opts.separator ""

      opts.on("-i", "--input", "Specify the directory where the images are found.") do | input | 
        options.input_dir = input
      end
      opts.separator ""

      opts.on("-l", "--lang", "Set the language for the OCR program to use. This is the language used in the documents. Default is German.") do | lang | 
        options.language = lang
      end
      opts.separator ""

      opts.on("-m", "--mark", "Set the text to be used in the water mark.") do | wm | 
        options.mark = wm
      end
      opts.separator ""

      opts.on("-o", "--output", "Set the directory name where the watermark and OCR files are output.") do | output | 
        options.output_dir = output
      end
      opts.separator ""

    end #opt_parser

    opt_parser.parse!(args)
    options

  end #parse
end #Parser



class Cowl
  attr_accessor :options, :working_images, :copied_images

  WORK_DIRS = %w(text marked)
  EXTENSIONS = "{jpg,jpeg,tif,tiff,gif,png}"

  def initialize(args)
    @options = args
    self.setup
    self.image_files
  end

  def setup
    # Create output directory if it doesn't exist
    WORK_DIRS.each do | directory |
      FileUtils.mkdir_p(@options.output_dir + "/#{directory}")
    end
  end

  def clean
    FileUtils.rm_rf(@options.output_dir)
  end

  def image_files
    @working_images ||= Dir.glob("#{@options.input_dir}/*.#{EXTENSIONS}", File::FNM_CASEFOLD)
  end

  def copied_files
    @copied_images ||= Dir.glob("#{@options.output_dir}/marked/*")
  end

  def to_png
    num = 1
    @working_images.each do | img |
      puts "Making a copy of #{img}."
      file_name = File.basename(img, ".*")
      file_copy = "#{@options.output_dir}/marked/#{file_name}.png"
      if File.file?(file_copy)
        file_copy = "#{@options.output_dir}/marked/#{file_name}_#{num}.png" 
        num += 1
      end
      image = Magick::Image.read(img).first
      image.format = "PNG"
      image.despeckle
      image.write(file_copy)
    end
  end

  def to_pdf
    self.to_png
    self.copied_files
    puts "Combining images into one pdf."
    pdf = Magick::ImageList.new(*@copied_images)
    pdf.write("#{@options.output_dir}/combined.pdf")
  end
end #Cowl


cowl = Cowl.new(Parser.parse(ARGV))

pp cowl.to_png
