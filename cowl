#!/usr/bin/env ruby


require "optparse"
require "ostruct"
require "pp"
require "fileutils"
require "RMagick"
require "rtesseract"

class Parser 
  def self.parse(args)
    options = OpenStruct.new
    options.cleanup = false
    options.no_watermark = false
    options.input_dir = FileUtils.pwd
    options.language = ":deu"
    options.mark = "Copyright Â©2014 The Marvellous and awesome Me" # TODO: get date from image file
    options.output_dir = FileUtils.pwd + "/output"
    options.pdf = false
    options.text = false
    options.water = FileUtils.pwd + "/mark.png" # TODO: get date from image file


    opt_parser = OptionParser.new do | opts | 
      opts.banner = "Usage: cowl [options]"
      opts.separator "
      cowl is a program that will take a directory of images
      and do the following actions on each image by default: 
        1) create a copy of the image with or without a watermark, 
        2) OCR the image and create a txt file containing the text, 
        3) compile the images into a single PDF document.

      Optional parameters exist to change and/or turn off certain behaviors." 
      opts.separator ""
      opts.separator "Options:"

      opts.on_tail("-h", "--help", "Show this help message.") do
        puts opts
        exit
      end
      opts.separator ""

      opts.on("-c", "--cleanup", "Delete images and folders created by running this script.") do
        options.cleanup = true
      end
      opts.separator ""

      opts.on("-i", "--input", "Specify the directory where the images are found.") do | input | 
        options.input_dir = input
      end
      opts.separator ""

      opts.on("-l", "--lang", "Set the language for the OCR program to use. This is the language used in the documents. Default is German [:deu].") do | lang | 
        options.language = lang
      end
      opts.separator ""

      opts.on("-m", "--mark", "Set the text to be used in the water mark.") do | wm | 
        options.mark = wm
      end
      opts.separator ""

      opts.on("-n", "--nowatermark", "Don't do the watermark thing.") do
        options.no_watermark = true
      end
      opts.separator ""

      opts.on("-o", "--output", "Set the directory name where the watermark and OCR files are output.") do | output | 
        options.output_dir = output
      end
      opts.separator ""

      opts.on("-p", "--pdf", "Don't create a PDF of all images.") do
        options.pdf = true
      end
      opts.separator ""

      opts.on("-t", "--text", "Don't run the OCR software on the image.") do
        options.text = true
      end
      opts.separator ""

      opts.on("-w", "--watermark", "Use the specified image for the watermark") do | water | 
        options.water = water
      end
      opts.separator ""

    end #opt_parser

    opt_parser.parse!(args)
    options

  end #parse
end #Parser



class Cowl
  attr_accessor :options, :working_images, :copied_images

  OCR_DIR = "text"
  MARK_DIR = "copies"
  WORK_DIRS = [OCR_DIR, MARK_DIR]
  EXTENSIONS = "{jpg,jpeg,tif,tiff,gif,png}"

  def initialize(args)
    @options = args
    self.setup
    self.image_files
  end

  def setup
    # Create output directory if it doesn't exist
    WORK_DIRS.each do | directory |
      FileUtils.mkdir_p(@options.output_dir + "/#{directory}")
    end
  end

  def clean
    puts "Deleting output directory and all files within."
    FileUtils.rm_rf(options.output_dir)
    exit
  end

  def image_files
    @working_images ||= Dir.glob("#{@options.input_dir}/*.#{EXTENSIONS}", File::FNM_CASEFOLD)
  end

  def copied_files
    self.to_png
    @copied_images ||= Dir.glob("#{@options.output_dir}/#{MARK_DIR}/*")
  end

  def file_name(image, counter)
    base_name = File.basename(image, ".*")
    new_name = "#{base_name}.png"
    if File.file?("#{@options.output_dir}/#{MARK_DIR}/#{new_name}")
      new_name = "#{base_name}_#{counter}.png" 
    end
    return new_name
  end

  def copy
    num = 0
    @working_images.each do | img |
      num += 1
      new_file = self.file_name(img, num)
      puts "Making a copy of #{img} as #{new_file}."
      image = Magick::Image.read(img).first
      image.format = "PNG"
      image.despeckle
      image.write("#{@options.output_dir}/#{MARK_DIR}/#{new_file}")
    end
  end

  def to_png
    self.copy unless Dir["#{@options.output_dir}/#{MARK_DIR}/*"].empty? == false
  end

  def to_pdf
    self.copied_files
    puts "Combining images into one pdf."
    pdf = Magick::ImageList.new(*@copied_images)
    pdf.write("#{@options.output_dir}/combined.pdf")
  end

  def watermark(image)
    height = image.columns / 30
    wmark = Magick::Draw.new
    wmark.opacity("20%")
    wmark.polygon(20,20, 80,100, 120,10, 100,180, 40,90, 20,180)
    wmark.draw(image)
    wmark.annotate(image, 0, 0, 0, 8, @options.mark) do
      self.font = 'Helvetica'
      self.font_weight = 900
      self.pointsize = height
      self.fill = '#ffffff90'
      self.undercolor = '#00000080'
      self.interline_spacing = 8
      self.gravity = Magick::SouthGravity
    end
  end

  def add_mark
    self.copied_files
    @copied_images.each do | img |
      puts "Putting watermark on #{img}."
      image = Magick::Image.read(img).first
      self.watermark(image)
      image.write(img)
    end
  end

  def to_text
    self.copied_files
    @copied_images.each do | img |
      puts "Running OCR on #{img}"
      base_name = File.basename(img, ".*")
      ocr = RTesseract.new(img, :lang => "deu")
      File.open("#{@options.output_dir}/#{OCR_DIR}/#{base_name}.txt", 'w') { |file| file.write(ocr) }
    end
  end

  def run
    self.clean unless @options.cleanup == false
    self.add_mark unless @options.no_watermark == true
    self.to_pdf unless @options.pdf == true
    self.to_text unless @options.text == true
  end

end #Cowl


cowl = Cowl.new(Parser.parse(ARGV))
cowl.run
